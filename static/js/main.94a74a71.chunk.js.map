{"version":3,"sources":["hooks/useTeam.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["useTeam","defaultColorIndex","colors","useState","colorIndex","score","details","setDetails","next","i","length","changeColor","prevState","addScore","scoreDisplay","aria-label","className","onClick","icon","faFutbol","changeColorButton","resetScore","App","teamOne","teamTwo","size","aria-hidden","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.94a74a71.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFutbol } from \"@fortawesome/pro-light-svg-icons/faFutbol\";\n\ntype DetailsType = {\n    colorIndex: number;\n    score: number;\n};\n\nexport default function useTeam(defaultColorIndex: number, colors: string[]) {\n    const [details, setDetails] = useState<DetailsType>({\n        colorIndex: defaultColorIndex ?? 0,\n        score: 0,\n    });\n\n    const next = (i: number): number => (i + 1) % colors.length;\n\n    const changeColor = (): void => {\n        setDetails((prevState) => ({\n            ...prevState,\n            colorIndex: next(prevState.colorIndex),\n        }));\n    };\n\n    const addScore = (): void => {\n        setDetails((prevState) => ({\n            ...prevState,\n            score: prevState.score + 1,\n        }));\n    };\n\n    const scoreDisplay = (): JSX.Element => (\n        <div aria-label=\"Team score display\">\n            <div className={`box ${colors[details.colorIndex]}`} onClick={addScore}>\n                <FontAwesomeIcon icon={faFutbol} />\n            </div>\n            <div className=\"score\">{details.score}</div>\n        </div>\n    );\n\n    const changeColorButton = (): JSX.Element => (\n        <button\n            onClick={changeColor}\n            className={`button ${colors[next(details.colorIndex)]}`}\n            aria-label=\"Change color button\"\n        >\n            Change Color\n        </button>\n    );\n\n    const resetScore = (): void => {\n        setDetails((prevState) => ({\n            ...prevState,\n            score: 0,\n        }));\n    };\n\n    return {\n        scoreDisplay,\n        changeColorButton,\n        resetScore,\n    };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFutbol } from \"@fortawesome/pro-solid-svg-icons/faFutbol\";\nimport useTeam from \"./hooks/useTeam\";\n\nfunction App(): JSX.Element {\n    const colors = [\"red\", \"blue\", \"black\", \"yellow\"];\n    const teamOne = useTeam(0, colors);\n    const teamTwo = useTeam(1, colors);\n\n    const handleReset = (): void => {\n        teamOne.resetScore();\n        teamTwo.resetScore();\n    };\n\n    return (\n        <main>\n            <header aria-label=\"Header\">\n                <div>\n                    <FontAwesomeIcon icon={faFutbol} size=\"5x\" />\n                </div>\n                <h1>Score</h1>\n            </header>\n            <section className=\"score-container\" aria-label=\"Score section\">\n                {teamOne.scoreDisplay()}\n                <div aria-label=\"Score separator\">\n                    <div aria-hidden=\"true\">&nbsp;</div>\n                    <div className=\"score-separator\">-</div>\n                </div>\n                {teamTwo.scoreDisplay()}\n            </section>\n            <footer aria-label=\"Footer\">\n                <div className=\"actions\" aria-label=\"Actions\">\n                    {teamOne.changeColorButton()}\n                    <button onClick={handleReset} className=\"button button-reset\">\n                        Reset\n                    </button>\n                    {teamTwo.changeColorButton()}\n                </div>\n            </footer>\n        </main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://cra.link/PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://cra.link/PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}